{"version":3,"sources":["webpack:///./task-1.js","webpack:///./task-2.js","webpack:///./task-3.js"],"names":["delay","ms","Promise","resolve","logger","time","console","log","then","users","name","active","toggleUserState","allUsers","userName","map","user","updatedUsers","table","makeTransaction","transaction","min","max","Math","floor","random","reject","setTimeout","id","logSuccess","logError","warn","amount","catch"],"mappings":"2JAAMA,EAAQ,SAAAC,GACV,OAAQ,IAAIC,SAAQ,SAAAC,GACnBA,EAAQF,OAGJG,EAAS,SAAAC,GAAI,OAAIC,QAAQC,IAAR,kBAA8BF,EAA9B,OAGvBL,EAAM,KAAMQ,KAAKJ,GACjBJ,EAAM,KAAMQ,KAAKJ,GACjBJ,EAAM,MAAMQ,KAAKJ,G,kCCVdK,EAAQ,CACV,CAAEC,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,MAAOC,QAAQ,IAGnBC,EAAkB,SAACC,EAAUC,GACjC,OAAO,IAAIZ,SAAQ,SAAAC,GAInBA,EAHuBU,EAASE,KAAI,SAAAC,GAAI,OAClCA,EAAKN,OAASI,EAAd,iBAA8BE,EAA9B,CAAoCL,QAASK,EAAKL,SAAWK,UAM/DZ,EAAS,SAAAa,GAAY,OAAIX,QAAQY,MAAMD,IAE7CL,EAAgBH,EAAO,SAASD,KAAKJ,GACrCQ,EAAgBH,EAAO,OAAOD,KAAKJ,GClBrC,IAIQe,EAAkB,SAACC,GACvB,IAL+BC,EAAKC,EAK9BtB,GALyBqB,EAKS,IALJC,EAKS,IAJtCC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,IAwBpD,OAnBAnB,QAAQC,QAAQH,GAEA,IAAIE,SAAS,SAACC,EAASuB,GACnCC,YAAW,WACYJ,KAAKE,SAAW,GAGjCtB,EAAQ,CAACiB,EAAYQ,GAAI5B,IAIvB0B,EAAON,EAAYQ,MAExB5B,OASH6B,EAAa,SAAC,GAAe,IAAdD,EAAc,KAAVvB,EAAU,KACjCC,QAAQC,IAAR,eAA2BqB,EAA3B,iBAA8CvB,EAA9C,QAEIyB,EAAW,SAAAF,GACftB,QAAQyB,KAAR,gCAA6CH,EAA7C,8BAMFT,EAAgB,CAAES,GAAI,GAAII,OAAQ,MAC/BxB,KAAKqB,GACLI,MAAMH,GAETX,EAAgB,CAAES,GAAI,GAAII,OAAQ,MAC/BxB,KAAKqB,GACLI,MAAMH,GAETX,EAAgB,CAAES,GAAI,GAAII,OAAQ,KAC/BxB,KAAKqB,GACLI,MAAMH,GAETX,EAAgB,CAAES,GAAI,GAAII,OAAQ,MAC/BxB,KAAKqB,GACLI,MAAMH,K","file":"main.8e988978a7349eb10fae.js","sourcesContent":["const delay = ms => {\r\n    return  new Promise(resolve => {    \r\n     resolve(ms);\r\n     });\r\n   };  \r\n   const logger = time => console.log(`Resolved after ${time}ms`);\r\n   \r\n   // Вызовы функции для проверки\r\n   delay(2000).then(logger); // Resolved after 2000ms\r\n   delay(1000).then(logger); // Resolved after 1000ms\r\n   delay(1500).then(logger); // Resolved after 1500ms\r\n \r\n ","const users = [\r\n    { name: 'Mango', active: true },\r\n    { name: 'Poly', active: false },\r\n    { name: 'Ajax', active: true },\r\n    { name: 'Lux', active: false },\r\n  ];\r\n  \r\n  const toggleUserState = (allUsers, userName) => {\r\n    return new Promise(resolve => {\r\n      const updatedUsers = allUsers.map(user =>\r\n          user.name === userName ? { ...user, active: !user.active } : user,\r\n        );\r\n    resolve(updatedUsers);        \r\n    });      \r\n  };\r\n \r\n  const logger = updatedUsers => console.table(updatedUsers); \r\n\r\n  toggleUserState(users, 'Mango').then(logger);\r\n  toggleUserState(users, 'Lux').then(logger);\r\n","\r\nconst randomIntegerFromInterval = (min, max) => {\r\n    return Math.floor(Math.random() * (max - min + 1) + min);\r\n  };\r\n\r\n  const makeTransaction = (transaction) => {\r\n    const delay = randomIntegerFromInterval(200, 500); \r\n    Promise.resolve(delay);\r\n   \r\n    const promise = new Promise ((resolve, reject) =>{\r\n        setTimeout(() => {       \r\n            const canProcess = Math.random() > 0.3;        \r\n                \r\n            if (canProcess) {               \r\n              resolve([transaction.id, delay] );\r\n                // {id: transaction.id, \r\n                // time: delay});\r\n            } else {            \r\n                reject(transaction.id);\r\n            }     \r\n        }, delay);\r\n\r\n        \r\n        //  console.log(a[0]);\r\n    });   \r\n    // , new Promise(delay)\r\n    return promise ;\r\n  };\r\n  \r\n  const logSuccess = ([id, time]) => {\r\n    console.log(`Transaction ${id} processed in ${time} ms`);\r\n  };  \r\n  const logError = id => {\r\n    console.warn(`Error processing transaction ${id}. Please try again later.`);\r\n  };  \r\n \r\n  /*\r\n   * Должно работать так\r\n   */\r\n  makeTransaction({ id: 70, amount: 150 })\r\n    .then(logSuccess)    \r\n    .catch(logError);\r\n  \r\n  makeTransaction({ id: 71, amount: 230 })\r\n    .then(logSuccess)\r\n    .catch(logError);\r\n  \r\n  makeTransaction({ id: 72, amount: 75 })\r\n    .then(logSuccess)\r\n    .catch(logError);\r\n  \r\n  makeTransaction({ id: 73, amount: 100 })\r\n    .then(logSuccess)\r\n    .catch(logError); \r\n\r\n   "],"sourceRoot":""}