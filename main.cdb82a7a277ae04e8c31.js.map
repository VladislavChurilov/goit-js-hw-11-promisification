{"version":3,"sources":["webpack:///./task-1.js","webpack:///./task-2.js","webpack:///./task-3.js"],"names":["delay","ms","Promise","resolve","logger","time","console","log","then","users","name","active","toggleUserState","allUsers","userName","updatedUsers","table","makeTransaction","transaction","min","max","Math","floor","random","reject","setTimeout","id","logSuccess","logError","warn","amount","catch"],"mappings":"2JAAMA,EAAQ,SAAAC,GACV,OAAQ,IAAIC,SAAQ,SAAAC,GACnBA,EAAQF,OAGJG,EAAS,SAAAC,GAAI,OAAIC,QAAQC,IAAR,kBAA8BF,EAA9B,OAGvBL,EAAM,KAAMQ,KAAKJ,GACjBJ,EAAM,KAAMQ,KAAKJ,GACjBJ,EAAM,MAAMQ,KAAKJ,GCRpB,IAAMK,EAAQ,CACV,CAAEC,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,MAAOC,QAAQ,IAGnBC,EAAkB,SAACC,EAAUC,GACjC,OAAO,IAAIZ,SAAQ,SAAAC,GACnBA,EAAQU,EAAUC,OAIdV,EAAS,SAAAW,GAAY,OAAIT,QAAQU,MAAMD,IAK7CH,EAAgBH,EAAO,SAASD,KAAKJ,GACrCQ,EAAgBH,EAAO,OAAOD,KAAKJ,GCpBrC,IAIQa,EAAkB,SAACC,GACvB,IAL+BC,EAAKC,EAK9BpB,GALyBmB,EAKS,IALJC,EAKS,IAJtCC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,IAoBpD,OAfgB,IAAIjB,SAAS,SAACC,EAASqB,GACnCC,YAAW,WAEYJ,KAAKE,SAAW,GAI/BpB,EAAQe,EAAYQ,GAAI1B,GAExBwB,EAAON,EAAYQ,MAIxB1B,OAKH2B,EAAa,SAACD,EAAIrB,GACtBC,QAAQC,IAAR,eAA2BmB,EAA3B,iBAA8CrB,EAA9C,OAEIuB,EAAW,SAAAF,GACfpB,QAAQuB,KAAR,gCAA6CH,EAA7C,8BAMFT,EAAgB,CAAES,GAAI,GAAII,OAAQ,MAC/BtB,KAAKmB,GACLI,MAAMH,GAETX,EAAgB,CAAES,GAAI,GAAII,OAAQ,MAC/BtB,KAAKmB,GACLI,MAAMH,GAETX,EAAgB,CAAES,GAAI,GAAII,OAAQ,KAC/BtB,KAAKmB,GACLI,MAAMH,GAETX,EAAgB,CAAES,GAAI,GAAII,OAAQ,MAC/BtB,KAAKmB,GACLI,MAAMH,K","file":"main.cdb82a7a277ae04e8c31.js","sourcesContent":["const delay = ms => {\r\n    return  new Promise(resolve => {    \r\n     resolve(ms);\r\n     });\r\n   };  \r\n   const logger = time => console.log(`Resolved after ${time}ms`);\r\n   \r\n   // Вызовы функции для проверки\r\n   delay(2000).then(logger); // Resolved after 2000ms\r\n   delay(1000).then(logger); // Resolved after 1000ms\r\n   delay(1500).then(logger); // Resolved after 1500ms\r\n \r\n ","\r\n\r\nconst users = [\r\n    { name: 'Mango', active: true },\r\n    { name: 'Poly', active: false },\r\n    { name: 'Ajax', active: true },\r\n    { name: 'Lux', active: false },\r\n  ];\r\n  \r\n  const toggleUserState = (allUsers, userName) => {\r\n    return new Promise(resolve => {\r\n    resolve(allUsers, userName);    \r\n    });    \r\n  };\r\n  \r\n  const logger = updatedUsers => console.table(updatedUsers);\r\n \r\n  /*\r\n   * Должно работать так\r\n   */\r\n  toggleUserState(users, 'Mango').then(logger);\r\n  toggleUserState(users, 'Lux').then(logger);\r\n","\r\nconst randomIntegerFromInterval = (min, max) => {\r\n    return Math.floor(Math.random() * (max - min + 1) + min);\r\n  };\r\n\r\n  const makeTransaction = (transaction) => {\r\n    const delay = randomIntegerFromInterval(200, 500);\r\n    const promise = new Promise ((resolve, reject) =>{\r\n        setTimeout(() => {\r\n       \r\n            const canProcess = Math.random() > 0.3;\r\n    \r\n        \r\n            if (canProcess) {            \r\n                resolve(transaction.id, delay)\r\n            } else {            \r\n                reject(transaction.id)\r\n            }\r\n        \r\n      \r\n        }, delay);\r\n    });\r\n    return promise;\r\n  };\r\n  \r\n  const logSuccess = (id, time) => {\r\n    console.log(`Transaction ${id} processed in ${time}ms`);\r\n  };  \r\n  const logError = id => {\r\n    console.warn(`Error processing transaction ${id}. Please try again later.`);\r\n  };  \r\n  \r\n  /*\r\n   * Должно работать так\r\n   */\r\n  makeTransaction({ id: 70, amount: 150 })\r\n    .then(logSuccess)\r\n    .catch(logError);\r\n  \r\n  makeTransaction({ id: 71, amount: 230 })\r\n    .then(logSuccess)\r\n    .catch(logError);\r\n  \r\n  makeTransaction({ id: 72, amount: 75 })\r\n    .then(logSuccess)\r\n    .catch(logError);\r\n  \r\n  makeTransaction({ id: 73, amount: 100 })\r\n    .then(logSuccess)\r\n    .catch(logError);"],"sourceRoot":""}